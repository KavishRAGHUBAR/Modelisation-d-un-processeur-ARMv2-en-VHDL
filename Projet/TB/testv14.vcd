$date
  Sat Jan 14 22:29:07 2023
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 32 ! if_adr[31:0] $end
$var reg 1 " if_adr_valid $end
$var reg 32 # ic_inst[31:0] $end
$var reg 1 $ ic_stall $end
$var reg 32 % mem_adr[31:0] $end
$var reg 1 & mem_stw $end
$var reg 1 ' mem_stb $end
$var reg 1 ( mem_load $end
$var reg 32 ) mem_data[31:0] $end
$var reg 32 * dc_data[31:0] $end
$var reg 1 + dc_stall $end
$var reg 1 , ck $end
$var reg 1 - reset_n $end
$var reg 1 . vdd $end
$var reg 1 / vss $end
$var reg 32 0 goodadr[31:0] $end
$var reg 32 1 badadr[31:0] $end
$scope module icache_i $end
$var reg 32 2 if_adr[31:0] $end
$var reg 1 3 if_adr_valid $end
$var reg 32 4 ic_inst[31:0] $end
$var reg 1 5 ic_stall $end
$upscope $end
$scope module dcache_i $end
$var reg 32 6 mem_adr[31:0] $end
$var reg 1 7 mem_stw $end
$var reg 1 8 mem_stb $end
$var reg 1 9 mem_load $end
$var reg 32 : mem_data[31:0] $end
$var reg 32 ; dc_data[31:0] $end
$var reg 1 < dc_stall $end
$var reg 1 = ck $end
$upscope $end
$scope module arm_core_i $end
$var reg 32 > if_adr[31:0] $end
$var reg 1 ? if_adr_valid $end
$var reg 32 @ ic_inst[31:0] $end
$var reg 1 A ic_stall $end
$var reg 32 B mem_adr[31:0] $end
$var reg 1 C mem_stw $end
$var reg 1 D mem_stb $end
$var reg 1 E mem_load $end
$var reg 32 F mem_data[31:0] $end
$var reg 32 G dc_data[31:0] $end
$var reg 1 H dc_stall $end
$var reg 1 I ck $end
$var reg 1 J reset_n $end
$var reg 1 K vdd $end
$var reg 1 L vss $end
$var reg 1 M if_pop $end
$var reg 32 N if_ir[31:0] $end
$var reg 1 O if2dec_empty $end
$var reg 32 P dec_op1[31:0] $end
$var reg 32 Q dec_op2[31:0] $end
$var reg 4 R dec_exe_dest[3:0] $end
$var reg 1 S dec_exe_wb $end
$var reg 1 T dec_flag_wb $end
$var reg 32 U dec_mem_data[31:0] $end
$var reg 4 V dec_mem_dest[3:0] $end
$var reg 1 W dec_pre_index $end
$var reg 1 X dec_mem_lw $end
$var reg 1 Y dec_mem_lb $end
$var reg 1 Z dec_mem_sw $end
$var reg 1 [ dec_mem_sb $end
$var reg 1 \ dec_shift_lsl $end
$var reg 1 ] dec_shift_lsr $end
$var reg 1 ^ dec_shift_asr $end
$var reg 1 _ dec_shift_ror $end
$var reg 1 ` dec_shift_rrx $end
$var reg 5 a dec_shift_val[4:0] $end
$var reg 1 b dec_cy $end
$var reg 1 c dec_comp_op1 $end
$var reg 1 d dec_comp_op2 $end
$var reg 1 e dec_alu_cy $end
$var reg 1 f dec2exe_empty $end
$var reg 2 g dec_alu_cmd[1:0] $end
$var reg 32 h dec_pc[31:0] $end
$var reg 1 i dec2if_empty $end
$var reg 1 j dec_pop $end
$var reg 1 k exe_pop $end
$var reg 1 l dec2exe_push $end
$var reg 32 m exe_res[31:0] $end
$var reg 1 n exe_c $end
$var reg 1 o exe_v $end
$var reg 1 p exe_n $end
$var reg 1 q exe_z $end
$var reg 4 r exe_dest[3:0] $end
$var reg 1 s exe_wb $end
$var reg 1 t exe_flag_wb $end
$var reg 32 u exe_mem_adr[31:0] $end
$var reg 32 v exe_mem_data[31:0] $end
$var reg 4 w exe_mem_dest[3:0] $end
$var reg 1 x exe_mem_lw $end
$var reg 1 y exe_mem_lb $end
$var reg 1 z exe_mem_sw $end
$var reg 1 { exe_mem_sb $end
$var reg 1 | exe2mem_empty $end
$var reg 1 } mem_pop $end
$var reg 32 !" mem_res[31:0] $end
$var reg 4 "" mem_dest[3:0] $end
$var reg 1 #" mem_wb $end
$var reg 127 $" dec2exe_out[126:0] $end
$var reg 127 %" dec2exe_in[126:0] $end
$var reg 1 &" dec2exe_full $end
$var reg 2 '" dec_alu_cmd_sig[1:0] $end
$scope module ifetch_i $end
$var reg 32 (" if_adr[31:0] $end
$var reg 1 )" if_adr_valid $end
$var reg 32 *" ic_inst[31:0] $end
$var reg 1 +" ic_stall $end
$var reg 1 ," dec2if_empty $end
$var reg 1 -" if_pop $end
$var reg 32 ." dec_pc[31:0] $end
$var reg 32 /" if_ir[31:0] $end
$var reg 1 0" if2dec_empty $end
$var reg 1 1" dec_pop $end
$var reg 1 2" ck $end
$var reg 1 3" reset_n $end
$var reg 1 4" vdd $end
$var reg 1 5" vss $end
$var reg 1 6" if2dec_push $end
$var reg 1 7" if2dec_full $end
$scope module if2dec $end
$var reg 32 8" din[31:0] $end
$var reg 32 9" dout[31:0] $end
$var reg 1 :" push $end
$var reg 1 ;" pop $end
$var reg 1 <" full $end
$var reg 1 =" empty $end
$var reg 1 >" reset_n $end
$var reg 1 ?" ck $end
$var reg 1 @" vdd $end
$var reg 1 A" vss $end
$var reg 32 B" fifo_d[31:0] $end
$var reg 1 C" fifo_v $end
$upscope $end
$upscope $end
$scope module decod_i $end
$var reg 32 D" dec_op1[31:0] $end
$var reg 32 E" dec_op2[31:0] $end
$var reg 4 F" dec_exe_dest[3:0] $end
$var reg 1 G" dec_exe_wb $end
$var reg 1 H" dec_flag_wb $end
$var reg 32 I" dec_mem_data[31:0] $end
$var reg 4 J" dec_mem_dest[3:0] $end
$var reg 1 K" dec_pre_index $end
$var reg 1 L" dec_mem_lw $end
$var reg 1 M" dec_mem_lb $end
$var reg 1 N" dec_mem_sw $end
$var reg 1 O" dec_mem_sb $end
$var reg 1 P" dec_shift_lsl $end
$var reg 1 Q" dec_shift_lsr $end
$var reg 1 R" dec_shift_asr $end
$var reg 1 S" dec_shift_ror $end
$var reg 1 T" dec_shift_rrx $end
$var reg 5 U" dec_shift_val[4:0] $end
$var reg 1 V" dec_cy $end
$var reg 1 W" dec_comp_op1 $end
$var reg 1 X" dec_comp_op2 $end
$var reg 1 Y" dec_alu_cy $end
$var reg 1 Z" dec2exe_empty $end
$var reg 1 [" exe_pop $end
$var reg 2 \" dec_alu_cmd[1:0] $end
$var reg 32 ]" exe_res[31:0] $end
$var reg 1 ^" exe_c $end
$var reg 1 _" exe_v $end
$var reg 1 `" exe_n $end
$var reg 1 a" exe_z $end
$var reg 4 b" exe_dest[3:0] $end
$var reg 1 c" exe_wb $end
$var reg 1 d" exe_flag_wb $end
$var reg 32 e" dec_pc[31:0] $end
$var reg 32 f" if_ir[31:0] $end
$var reg 1 g" dec2if_empty $end
$var reg 1 h" if_pop $end
$var reg 1 i" if2dec_empty $end
$var reg 1 j" dec_pop $end
$var reg 32 k" mem_res[31:0] $end
$var reg 4 l" mem_dest[3:0] $end
$var reg 1 m" mem_wb $end
$var reg 1 n" ck $end
$var reg 1 o" reset_n $end
$var reg 1 p" vdd $end
$var reg 1 q" vss $end
$var reg 1 r" condv $end
$var reg 1 s" cond $end
$var reg 1 t" cond_en $end
$var reg 1 u" regop_t $end
$var reg 1 v" mult_t $end
$var reg 1 w" swap_t $end
$var reg 1 x" trans_t $end
$var reg 1 y" mtrans_t $end
$var reg 1 z" branch_t $end
$var reg 1 {" and_i $end
$var reg 1 |" eor_i $end
$var reg 1 }" sub_i $end
$var reg 1 !# rsb_i $end
$var reg 1 "# add_i $end
$var reg 1 ## adc_i $end
$var reg 1 $# sbc_i $end
$var reg 1 %# rsc_i $end
$var reg 1 &# tst_i $end
$var reg 1 '# teq_i $end
$var reg 1 (# cmp_i $end
$var reg 1 )# cmn_i $end
$var reg 1 *# orr_i $end
$var reg 1 +# mov_i $end
$var reg 1 ,# bic_i $end
$var reg 1 -# mvn_i $end
$var reg 1 .# mul_i $end
$var reg 1 /# mla_i $end
$var reg 1 0# ldrw_i $end
$var reg 1 1# ldrb_i $end
$var reg 1 2# strw_i $end
$var reg 1 3# strb_i $end
$var reg 1 4# ldm_i $end
$var reg 1 5# stm_i $end
$var reg 1 6# b_i $end
$var reg 1 7# bl_i $end
$var reg 1 8# t1_fetch $end
$var reg 1 9# t2_fetch $end
$var reg 1 :# t1_run $end
$var reg 1 ;# t2_run $end
$var reg 1 <# t3_run $end
$var reg 1 =# t4_run $end
$var reg 1 ># t5_run $end
$var reg 1 ?# t6_run $end
$var reg 1 @# t1_link $end
$var reg 1 A# t1_branch $end
$var reg 1 B# t2_branch $end
$var reg 1 C# t3_branch $end
$var reg 1 D# t1_mtrans $end
$var reg 1 E# t2_mtrans $end
$var reg 1 F# t3_mtrans $end
$var reg 32 G# reg_pc_sig[31:0] $end
$var reg 1 H# reg_pcv_sig $end
$var reg 1 I# dec2if_push $end
$var reg 1 J# inc_pc_sig $end
$var reg 4 K# radr1_sig[3:0] $end
$var reg 4 L# radr2_sig[3:0] $end
$var reg 4 M# radr3_sig[3:0] $end
$var reg 32 N# reg_rd1_sig[31:0] $end
$var reg 32 O# reg_rd2_sig[31:0] $end
$var reg 32 P# reg_rd3_sig[31:0] $end
$var reg 1 Q# rv1_sig $end
$var reg 1 R# rv2_sig $end
$var reg 1 S# rv3_sig $end
$var reg 1 T# reg_cznv_sig $end
$var reg 1 U# reg_vv_sig $end
$var reg 32 V# wdata1_sig[31:0] $end
$var reg 32 W# wdata2_sig[31:0] $end
$var reg 1 X# wen1_sig $end
$var reg 1 Y# wen2_sig $end
$var reg 4 Z# inval_adr1_sig[3:0] $end
$var reg 1 [# inval1_sig $end
$var reg 4 \# inval_adr2_sig[3:0] $end
$var reg 1 ]# inval2_sig $end
$var reg 1 ^# inval_czn_sig $end
$var reg 1 _# inval_ovr_sig $end
$var reg 1 `# cry $end
$var reg 1 a# zero $end
$var reg 1 b# neg $end
$var reg 1 c# ovr $end
$var reg 1 d# dec2if_empty_sig $end
$var reg 1 e# dec2if_full_sig $end
$var reg 1 f# dec_shift_lsl_sig $end
$var reg 1 g# dec_shift_lsr_sig $end
$var reg 1 h# dec_shift_asr_sig $end
$var reg 1 i# dec_shift_ror_sig $end
$var reg 1 j# dec_shift_rrx_sig $end
$var reg 5 k# dec_shift_val_sig[4:0] $end
$var reg 1 l# dec_cy_sig $end
$var reg 1 m# dec_mem_lw_sig $end
$var reg 1 n# dec_mem_lb_sig $end
$var reg 1 o# dec_mem_sw_sig $end
$var reg 1 p# dec_mem_sb_sig $end
$comment etat_present is not handled $end
$comment etat_futur is not handled $end
$scope module banc_de_registre $end
$var reg 32 q# wdata1[31:0] $end
$var reg 4 r# wadr1[3:0] $end
$var reg 1 s# wen1 $end
$var reg 32 t# wdata2[31:0] $end
$var reg 4 u# wadr2[3:0] $end
$var reg 1 v# wen2 $end
$var reg 1 w# wcry $end
$var reg 1 x# wzero $end
$var reg 1 y# wneg $end
$var reg 1 z# wovr $end
$var reg 1 {# cspr_wb $end
$var reg 32 |# reg_rd1[31:0] $end
$var reg 4 }# radr1[3:0] $end
$var reg 1 !$ reg_v1 $end
$var reg 32 "$ reg_rd2[31:0] $end
$var reg 4 #$ radr2[3:0] $end
$var reg 1 $$ reg_v2 $end
$var reg 32 %$ reg_rd3[31:0] $end
$var reg 4 &$ radr3[3:0] $end
$var reg 1 '$ reg_v3 $end
$var reg 1 ($ reg_cry $end
$var reg 1 )$ reg_zero $end
$var reg 1 *$ reg_neg $end
$var reg 1 +$ reg_cznv $end
$var reg 1 ,$ reg_ovr $end
$var reg 1 -$ reg_vv $end
$var reg 4 .$ inval_adr1[3:0] $end
$var reg 1 /$ inval1 $end
$var reg 4 0$ inval_adr2[3:0] $end
$var reg 1 1$ inval2 $end
$var reg 1 2$ inval_czn $end
$var reg 1 3$ inval_ovr $end
$var reg 32 4$ reg_pc[31:0] $end
$var reg 1 5$ reg_pcv $end
$var reg 1 6$ inc_pc $end
$var reg 1 7$ ck $end
$var reg 1 8$ reset_n $end
$var reg 1 9$ vdd $end
$var reg 1 :$ vss $end
$var reg 32 ;$ r0[31:0] $end
$var reg 32 <$ r1[31:0] $end
$var reg 32 =$ r2[31:0] $end
$var reg 32 >$ r3[31:0] $end
$var reg 32 ?$ r4[31:0] $end
$var reg 32 @$ r5[31:0] $end
$var reg 32 A$ r6[31:0] $end
$var reg 32 B$ r7[31:0] $end
$var reg 32 C$ r8[31:0] $end
$var reg 32 D$ r9[31:0] $end
$var reg 32 E$ r10[31:0] $end
$var reg 32 F$ r11[31:0] $end
$var reg 32 G$ r12[31:0] $end
$var reg 32 H$ r13[31:0] $end
$var reg 32 I$ r14[31:0] $end
$var reg 32 J$ pc[31:0] $end
$var reg 1 K$ vr0 $end
$var reg 1 L$ vr1 $end
$var reg 1 M$ vr2 $end
$var reg 1 N$ vr3 $end
$var reg 1 O$ vr4 $end
$var reg 1 P$ vr5 $end
$var reg 1 Q$ vr6 $end
$var reg 1 R$ vr7 $end
$var reg 1 S$ vr8 $end
$var reg 1 T$ vr9 $end
$var reg 1 U$ vr10 $end
$var reg 1 V$ vr11 $end
$var reg 1 W$ vr12 $end
$var reg 1 X$ vr13 $end
$var reg 1 Y$ vr14 $end
$var reg 1 Z$ vpc $end
$var reg 1 [$ f_cry $end
$var reg 1 \$ f_zero $end
$var reg 1 ]$ f_neg $end
$var reg 1 ^$ f_cznv $end
$var reg 1 _$ f_ovr $end
$var reg 1 `$ f_vv $end
$upscope $end
$scope module dec2if_fifo $end
$var reg 32 a$ din[31:0] $end
$var reg 32 b$ dout[31:0] $end
$var reg 1 c$ push $end
$var reg 1 d$ pop $end
$var reg 1 e$ full $end
$var reg 1 f$ empty $end
$var reg 1 g$ reset_n $end
$var reg 1 h$ ck $end
$var reg 1 i$ vdd $end
$var reg 1 j$ vss $end
$var reg 32 k$ fifo_d[31:0] $end
$var reg 1 l$ fifo_v $end
$upscope $end
$upscope $end
$scope module dec2exe $end
$var reg 127 m$ din[126:0] $end
$var reg 127 n$ dout[126:0] $end
$var reg 1 o$ push $end
$var reg 1 p$ pop $end
$var reg 1 q$ full $end
$var reg 1 r$ empty $end
$var reg 1 s$ reset_n $end
$var reg 1 t$ ck $end
$var reg 1 u$ vdd $end
$var reg 1 v$ vss $end
$var reg 127 w$ fifo_d[126:0] $end
$var reg 1 x$ fifo_v $end
$upscope $end
$scope module exec_i $end
$var reg 1 y$ dec2exe_empty $end
$var reg 1 z$ exe_pop $end
$var reg 32 {$ dec_op1[31:0] $end
$var reg 32 |$ dec_op2[31:0] $end
$var reg 4 }$ dec_exe_dest[3:0] $end
$var reg 1 !% dec_exe_wb $end
$var reg 1 "% dec_flag_wb $end
$var reg 32 #% dec_mem_data[31:0] $end
$var reg 4 $% dec_mem_dest[3:0] $end
$var reg 1 %% dec_pre_index $end
$var reg 1 &% dec_mem_lw $end
$var reg 1 '% dec_mem_lb $end
$var reg 1 (% dec_mem_sw $end
$var reg 1 )% dec_mem_sb $end
$var reg 1 *% dec_shift_lsl $end
$var reg 1 +% dec_shift_lsr $end
$var reg 1 ,% dec_shift_asr $end
$var reg 1 -% dec_shift_ror $end
$var reg 1 .% dec_shift_rrx $end
$var reg 5 /% dec_shift_val[4:0] $end
$var reg 1 0% dec_cy $end
$var reg 1 1% dec_comp_op1 $end
$var reg 1 2% dec_comp_op2 $end
$var reg 1 3% dec_alu_cy $end
$var reg 2 4% dec_alu_cmd[1:0] $end
$var reg 32 5% exe_res[31:0] $end
$var reg 1 6% exe_c $end
$var reg 1 7% exe_v $end
$var reg 1 8% exe_n $end
$var reg 1 9% exe_z $end
$var reg 4 :% exe_dest[3:0] $end
$var reg 1 ;% exe_wb $end
$var reg 1 <% exe_flag_wb $end
$var reg 32 =% exe_mem_adr[31:0] $end
$var reg 32 >% exe_mem_data[31:0] $end
$var reg 4 ?% exe_mem_dest[3:0] $end
$var reg 1 @% exe_mem_lw $end
$var reg 1 A% exe_mem_lb $end
$var reg 1 B% exe_mem_sw $end
$var reg 1 C% exe_mem_sb $end
$var reg 1 D% exe2mem_empty $end
$var reg 1 E% mem_pop $end
$var reg 1 F% ck $end
$var reg 1 G% reset_n $end
$var reg 1 H% vdd $end
$var reg 1 I% vss $end
$var reg 1 J% shift_c $end
$var reg 1 K% alu_c $end
$var reg 32 L% op2[31:0] $end
$var reg 32 M% op2_shift[31:0] $end
$var reg 32 N% op1[31:0] $end
$var reg 32 O% alu_res[31:0] $end
$var reg 32 P% res_reg[31:0] $end
$var reg 32 Q% mem_adr[31:0] $end
$var reg 1 R% exe_push $end
$var reg 1 S% exe2mem_full $end
$var reg 1 T% mem_acces $end
$scope module shifter_inst $end
$var reg 1 U% shift_lsl $end
$var reg 1 V% shift_lsr $end
$var reg 1 W% shift_asr $end
$var reg 1 X% shift_ror $end
$var reg 1 Y% shift_rrx $end
$var reg 5 Z% shift_val[4:0] $end
$var reg 32 [% din[31:0] $end
$var reg 1 \% cin $end
$var reg 32 ]% dout[31:0] $end
$var reg 1 ^% cout $end
$var reg 1 _% vdd $end
$var reg 1 `% vss $end
$var reg 32 a% out_lsl[31:0] $end
$var reg 32 b% out_lsr[31:0] $end
$var reg 32 c% out_asr[31:0] $end
$var reg 1 d% coutlsl $end
$var reg 1 e% coutlsr $end
$var reg 1 f% coutasr $end
$scope module lsl_inst $end
$var reg 32 g% din[31:0] $end
$var reg 5 h% shift_val[4:0] $end
$var reg 32 i% dout[31:0] $end
$var reg 1 j% cout $end
$var reg 1 k% vdd $end
$var reg 1 l% vss $end
$upscope $end
$scope module lsr_inst $end
$var reg 32 m% din[31:0] $end
$var reg 5 n% shift_val[4:0] $end
$var reg 32 o% dout[31:0] $end
$var reg 1 p% cout $end
$var reg 1 q% vdd $end
$var reg 1 r% vss $end
$upscope $end
$scope module asr_inst $end
$var reg 32 s% din[31:0] $end
$var reg 5 t% shift_val[4:0] $end
$var reg 32 u% dout[31:0] $end
$var reg 1 v% cout $end
$var reg 1 w% vdd $end
$var reg 1 x% vss $end
$upscope $end
$upscope $end
$scope module alu_inst $end
$var reg 32 y% op1[31:0] $end
$var reg 32 z% op2[31:0] $end
$var reg 1 {% cin $end
$var reg 2 |% cmd[1:0] $end
$var reg 32 }% res[31:0] $end
$var reg 1 !& cout $end
$var reg 1 "& n $end
$var reg 1 #& z $end
$var reg 1 $& v $end
$var reg 1 %& vdd $end
$var reg 1 && vss $end
$var reg 32 '& s[31:0] $end
$var reg 1 (& carryo $end
$scope module add $end
$var reg 32 )& a[31:0] $end
$var reg 32 *& b[31:0] $end
$var reg 1 +& cin $end
$var reg 32 ,& s[31:0] $end
$var reg 1 -& cout $end
$var reg 9 .& carry[8:0] $end
$scope module (0) $end
$scope module add4_inst $end
$var reg 4 /& a[3:0] $end
$var reg 4 0& b[3:0] $end
$var reg 1 1& cin $end
$var reg 4 2& s[3:0] $end
$var reg 1 3& cout $end
$var reg 5 4& carry[4:0] $end
$scope module (0) $end
$scope module adder1_inst $end
$var reg 1 5& a $end
$var reg 1 6& b $end
$var reg 1 7& cin $end
$var reg 1 8& s $end
$var reg 1 9& cout $end
$upscope $end
$upscope $end
$scope module (1) $end
$scope module adder1_inst $end
$var reg 1 :& a $end
$var reg 1 ;& b $end
$var reg 1 <& cin $end
$var reg 1 =& s $end
$var reg 1 >& cout $end
$upscope $end
$upscope $end
$scope module (2) $end
$scope module adder1_inst $end
$var reg 1 ?& a $end
$var reg 1 @& b $end
$var reg 1 A& cin $end
$var reg 1 B& s $end
$var reg 1 C& cout $end
$upscope $end
$upscope $end
$scope module (3) $end
$scope module adder1_inst $end
$var reg 1 D& a $end
$var reg 1 E& b $end
$var reg 1 F& cin $end
$var reg 1 G& s $end
$var reg 1 H& cout $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module (1) $end
$scope module add4_inst $end
$var reg 4 I& a[3:0] $end
$var reg 4 J& b[3:0] $end
$var reg 1 K& cin $end
$var reg 4 L& s[3:0] $end
$var reg 1 M& cout $end
$var reg 5 N& carry[4:0] $end
$scope module (0) $end
$scope module adder1_inst $end
$var reg 1 O& a $end
$var reg 1 P& b $end
$var reg 1 Q& cin $end
$var reg 1 R& s $end
$var reg 1 S& cout $end
$upscope $end
$upscope $end
$scope module (1) $end
$scope module adder1_inst $end
$var reg 1 T& a $end
$var reg 1 U& b $end
$var reg 1 V& cin $end
$var reg 1 W& s $end
$var reg 1 X& cout $end
$upscope $end
$upscope $end
$scope module (2) $end
$scope module adder1_inst $end
$var reg 1 Y& a $end
$var reg 1 Z& b $end
$var reg 1 [& cin $end
$var reg 1 \& s $end
$var reg 1 ]& cout $end
$upscope $end
$upscope $end
$scope module (3) $end
$scope module adder1_inst $end
$var reg 1 ^& a $end
$var reg 1 _& b $end
$var reg 1 `& cin $end
$var reg 1 a& s $end
$var reg 1 b& cout $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module (2) $end
$scope module add4_inst $end
$var reg 4 c& a[3:0] $end
$var reg 4 d& b[3:0] $end
$var reg 1 e& cin $end
$var reg 4 f& s[3:0] $end
$var reg 1 g& cout $end
$var reg 5 h& carry[4:0] $end
$scope module (0) $end
$scope module adder1_inst $end
$var reg 1 i& a $end
$var reg 1 j& b $end
$var reg 1 k& cin $end
$var reg 1 l& s $end
$var reg 1 m& cout $end
$upscope $end
$upscope $end
$scope module (1) $end
$scope module adder1_inst $end
$var reg 1 n& a $end
$var reg 1 o& b $end
$var reg 1 p& cin $end
$var reg 1 q& s $end
$var reg 1 r& cout $end
$upscope $end
$upscope $end
$scope module (2) $end
$scope module adder1_inst $end
$var reg 1 s& a $end
$var reg 1 t& b $end
$var reg 1 u& cin $end
$var reg 1 v& s $end
$var reg 1 w& cout $end
$upscope $end
$upscope $end
$scope module (3) $end
$scope module adder1_inst $end
$var reg 1 x& a $end
$var reg 1 y& b $end
$var reg 1 z& cin $end
$var reg 1 {& s $end
$var reg 1 |& cout $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module (3) $end
$scope module add4_inst $end
$var reg 4 }& a[3:0] $end
$var reg 4 !' b[3:0] $end
$var reg 1 "' cin $end
$var reg 4 #' s[3:0] $end
$var reg 1 $' cout $end
$var reg 5 %' carry[4:0] $end
$scope module (0) $end
$scope module adder1_inst $end
$var reg 1 &' a $end
$var reg 1 '' b $end
$var reg 1 (' cin $end
$var reg 1 )' s $end
$var reg 1 *' cout $end
$upscope $end
$upscope $end
$scope module (1) $end
$scope module adder1_inst $end
$var reg 1 +' a $end
$var reg 1 ,' b $end
$var reg 1 -' cin $end
$var reg 1 .' s $end
$var reg 1 /' cout $end
$upscope $end
$upscope $end
$scope module (2) $end
$scope module adder1_inst $end
$var reg 1 0' a $end
$var reg 1 1' b $end
$var reg 1 2' cin $end
$var reg 1 3' s $end
$var reg 1 4' cout $end
$upscope $end
$upscope $end
$scope module (3) $end
$scope module adder1_inst $end
$var reg 1 5' a $end
$var reg 1 6' b $end
$var reg 1 7' cin $end
$var reg 1 8' s $end
$var reg 1 9' cout $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module (4) $end
$scope module add4_inst $end
$var reg 4 :' a[3:0] $end
$var reg 4 ;' b[3:0] $end
$var reg 1 <' cin $end
$var reg 4 =' s[3:0] $end
$var reg 1 >' cout $end
$var reg 5 ?' carry[4:0] $end
$scope module (0) $end
$scope module adder1_inst $end
$var reg 1 @' a $end
$var reg 1 A' b $end
$var reg 1 B' cin $end
$var reg 1 C' s $end
$var reg 1 D' cout $end
$upscope $end
$upscope $end
$scope module (1) $end
$scope module adder1_inst $end
$var reg 1 E' a $end
$var reg 1 F' b $end
$var reg 1 G' cin $end
$var reg 1 H' s $end
$var reg 1 I' cout $end
$upscope $end
$upscope $end
$scope module (2) $end
$scope module adder1_inst $end
$var reg 1 J' a $end
$var reg 1 K' b $end
$var reg 1 L' cin $end
$var reg 1 M' s $end
$var reg 1 N' cout $end
$upscope $end
$upscope $end
$scope module (3) $end
$scope module adder1_inst $end
$var reg 1 O' a $end
$var reg 1 P' b $end
$var reg 1 Q' cin $end
$var reg 1 R' s $end
$var reg 1 S' cout $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module (5) $end
$scope module add4_inst $end
$var reg 4 T' a[3:0] $end
$var reg 4 U' b[3:0] $end
$var reg 1 V' cin $end
$var reg 4 W' s[3:0] $end
$var reg 1 X' cout $end
$var reg 5 Y' carry[4:0] $end
$scope module (0) $end
$scope module adder1_inst $end
$var reg 1 Z' a $end
$var reg 1 [' b $end
$var reg 1 \' cin $end
$var reg 1 ]' s $end
$var reg 1 ^' cout $end
$upscope $end
$upscope $end
$scope module (1) $end
$scope module adder1_inst $end
$var reg 1 _' a $end
$var reg 1 `' b $end
$var reg 1 a' cin $end
$var reg 1 b' s $end
$var reg 1 c' cout $end
$upscope $end
$upscope $end
$scope module (2) $end
$scope module adder1_inst $end
$var reg 1 d' a $end
$var reg 1 e' b $end
$var reg 1 f' cin $end
$var reg 1 g' s $end
$var reg 1 h' cout $end
$upscope $end
$upscope $end
$scope module (3) $end
$scope module adder1_inst $en